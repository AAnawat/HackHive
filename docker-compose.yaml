services:
  frontend:
    build:
      context: ./frontend
      dockerfile: dockerfile
    container_name: hackhive-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - hackhive-network
  backend:
    build:
      context: ./backend
      dockerfile: dockerfile
    container_name: hackhive-backend
    ports:
      - "8080:8080"
    volumes:
      - /app/node_modules
      - ./backend:/app
    env_file:
      - ./backend/.env
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
    depends_on: 
      - database
    networks:
      - hackhive-network
  database:
    image: postgres
    container_name: hackhive-postgres
    ports:
      - "5432:5432"
    volumes:
      - hackhive-ps:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - hackhive-network
  problem:
    build:
      context: ./problems/
      dockerfile: dockerfile
    container_name: hackhive-problem
    ports:
      - "1234:1234"
    networks:
      - hackhive-network
  scheduler:
    build:
      context: ./scheduler/
      dockerfile: dockerfile
    container_name: hackhive-scheduler
    env_file:
      - ./scheduler/.env
    environment:
      - NODE_ENV=development
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
    networks:
      - hackhive-network

networks:
  hackhive-network:

volumes:
  hackhive-ps:
